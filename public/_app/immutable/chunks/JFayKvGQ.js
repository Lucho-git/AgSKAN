import{a}from"./DsDOFx4q.js";import{g as f}from"./DRVwA9lO.js";const p=new Set;async function g(r){var l,i;if(!r||!r.user)return console.log("[Auth Helper] No valid session data provided"),!1;const e=r.user.id;if(p.has(e))return console.log("[Auth Helper] Already processed user session:",e),!0;console.log("[Auth Helper] Checking profile for user:",e),p.add(e);const{data:t,error:n}=await a.from("profiles").select("id, email, full_name, avatar_url, created_at").eq("id",e).single(),o={id:e,email:r.user.email,full_name:((l=r.user.user_metadata)==null?void 0:l.full_name)||null,avatar_url:((i=r.user.user_metadata)==null?void 0:i.avatar_url)||null,updated_at:new Date().toISOString(),last_sign_in:r.user.last_sign_in||new Date().toISOString()};if(n&&n.code==="PGRST116"){console.log("[Auth Helper] No profile found, creating new profile");const{error:u}=await a.from("profiles").insert({...o,created_at:new Date().toISOString(),onboarded:!1});return u&&u.code!=="23505"?(console.error("[Auth Helper] Error creating profile:",u),!1):(console.log("[Auth Helper] Profile created successfully"),await d(e),!0)}if(t){if(console.log("[Auth Helper] Existing profile found:",t),!t.email||!t.full_name&&o.full_name||!t.avatar_url&&o.avatar_url){console.log("[Auth Helper] Profile exists but needs updating with missing data");const s={updated_at:o.updated_at};t.email||(s.email=o.email),!t.full_name&&o.full_name&&(s.full_name=o.full_name),!t.avatar_url&&o.avatar_url&&(s.avatar_url=o.avatar_url);const{error:c}=await a.from("profiles").update(s).eq("id",e);if(c)return console.error("[Auth Helper] Error updating profile:",c),!1;console.log("[Auth Helper] Profile updated successfully with data:",s)}else{console.log("[Auth Helper] Profile exists and has all required data, just updating timestamps");const{error:s}=await a.from("profiles").update({last_sign_in:o.last_sign_in}).eq("id",e);s?console.error("[Auth Helper] Error updating profile timestamp:",s):console.log("[Auth Helper] Profile timestamp updated successfully")}return await d(e),!0}return console.error("[Auth Helper] Unexpected state in profile check"),!1}async function d(r){try{console.log("[Auth Helper] Checking for existing subscription for user:",r);const{data:e,error:t}=await a.from("user_subscriptions").select("user_id").eq("user_id",r);if(t)console.log("[Auth Helper] Error checking subscriptions (will try to create):",t.code);else if(e&&e.length>0)return console.log(`[Auth Helper] Found ${e.length} existing subscription(s)`),!0;console.log("[Auth Helper] No valid subscription found, creating one");const{error:n}=await a.from("user_subscriptions").insert({user_id:r,subscription:"FREE",marker_limit:100,trail_limit:1e5,current_seats:1,updated_at:new Date().toISOString(),created_at:new Date().toISOString()});return n?n.code==="23505"?(console.log("[Auth Helper] Subscription already exists (unique constraint)"),!0):(console.log("[Auth Helper] Non-critical error creating subscription:",n.code),!1):(console.log("[Auth Helper] Free subscription created successfully"),!0)}catch(e){return console.log("[Auth Helper] Unexpected error in subscription management:",e),!1}}function A(r="/account"){console.log("[Auth Helper] Setting up auth listener with redirect to:",r);let e=!1;const t=async()=>{const{data:{session:l}}=await a.auth.getSession();l?(console.log("[Auth Helper] Found existing session on page load, processing..."),await n("EXISTING_SESSION",l)):console.log("[Auth Helper] No existing session found")},n=async(l,i)=>{var u;if(console.log("[Auth Helper] Auth event:",l,"User:",(u=i==null?void 0:i.user)==null?void 0:u.id),!i){console.log("[Auth Helper] No session in auth event");return}if(l==="INITIAL_SESSION"){console.log("[Auth Helper] Ignoring INITIAL_SESSION event");return}if((l==="SIGNED_IN"||l==="USER_UPDATED"||l==="EXISTING_SESSION")&&!e){console.log("[Auth Helper] Processing auth event:",l),e=!0;try{const s=await g(i);console.log("[Auth Helper] Profile update/creation result:",s),window.location.pathname!==r?(console.log(`[Auth Helper] Auth processing complete, redirecting to ${r}`),f(r)):console.log(`[Auth Helper] Already on ${r}, no redirect needed`)}catch(s){console.error("[Auth Helper] Error processing authentication:",s)}finally{e=!1}}};setTimeout(t,0);const{data:{subscription:o}}=a.auth.onAuthStateChange(n);return{data:{subscription:o},checkNow:t}}export{A as s,g as u};
