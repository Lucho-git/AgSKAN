import{s as w,r as d,v as f,m as g,u as _,o as E,p as y}from"./scheduler.BVGjjnGO.js";import{S as $,i as F,d as b,t as m,a as p,m as k,c as I,b as N}from"./index.Vv2yv23T.js";import{g as D,a as S}from"./spread.CgU5AtxT.js";import{I as q}from"./Icon.BjfYQTkH.js";import{s as n}from"./supabaseClient.CEfSaNHh.js";function A(o){let e;const a=o[2].default,t=g(a,o,o[3],null);return{c(){t&&t.c()},l(s){t&&t.l(s)},m(s,r){t&&t.m(s,r),e=!0},p(s,r){t&&t.p&&(!e||r&8)&&_(t,a,s,s[3],e?y(a,s[3],r,null):E(s[3]),null)},i(s){e||(p(t,s),e=!0)},o(s){m(t,s),e=!1},d(s){t&&t.d(s)}}}function M(o){let e,a;const t=[{name:"info"},o[1],{iconNode:o[0]}];let s={$$slots:{default:[A]},$$scope:{ctx:o}};for(let r=0;r<t.length;r+=1)s=d(s,t[r]);return e=new q({props:s}),{c(){N(e.$$.fragment)},l(r){I(e.$$.fragment,r)},m(r,i){k(e,r,i),a=!0},p(r,[i]){const c=i&3?D(t,[t[0],i&2&&S(r[1]),i&1&&{iconNode:r[0]}]):{};i&8&&(c.$$scope={dirty:i,ctx:r}),e.$set(c)},i(r){a||(p(e.$$.fragment,r),a=!0)},o(r){m(e.$$.fragment,r),a=!1},d(r){b(e,r)}}}function j(o,e,a){let{$$slots:t={},$$scope:s}=e;const r=[["circle",{cx:"12",cy:"12",r:"10"}],["path",{d:"M12 16v-4"}],["path",{d:"M12 8h.01"}]];return o.$$set=i=>{a(1,e=d(d({},e),f(i))),"$$scope"in i&&a(3,s=i.$$scope)},e=f(e),[r,e,t,s]}class R extends ${constructor(e){super(),F(this,e,j,M,w,{})}}const T={async uploadFields(o,e){try{const{data:a}=await n.auth.getSession();if(!a?.session?.user)throw new Error("Not authenticated");const t=[],s=[];if(!o||!Array.isArray(e)||e.length===0)throw new Error("Invalid data format");for(const r of e){if(r.status!=="accepted"){s.push({name:r.name,reason:"Not accepted"});continue}const i={map_id:o,name:r.name,area:r.area,boundary:r.boundary,properties:r.properties};try{const{data:c,error:l}=await n.from("fields").insert([i]).select("*");l?l.code==="23505"?s.push({name:r.name,reason:"Duplicate field name"}):s.push({name:r.name,reason:l.message}):c&&c.length>0&&t.push(c[0])}catch{s.push({name:r.name,reason:"Unexpected error"})}}if(t.length===0&&s.length>0){let r="";if(s.length===1)r=`Paddock "${s[0].name}" was rejected: ${s[0].reason}`;else{const i=[...new Set(s.map(c=>c.reason))];r=`All ${s.length} paddocks were rejected. Reasons: ${i.join(", ")}`}throw new Error(r)}return{success:!0,insertedFields:t,rejectedFields:s}}catch(a){return console.error("Error uploading fields:",a),{success:!1,message:a.message,insertedFields:[],rejectedFields:[]}}},async downloadFile(o){try{const{data:e}=await n.auth.getSession();if(!e?.session?.user)throw new Error("Not authenticated");const t=`user_${e.session.user.id}/${o}`,{data:s,error:r}=await n.storage.from("user_files_bucket").download(t);if(r)throw new Error(`Failed to download file: ${r.message}`);if(!s)throw new Error("File not found");return{success:!0,data:s}}catch(e){return console.error("Error downloading file:",e),{success:!1,message:e.message}}},async deleteFile(o){try{const{data:e}=await n.auth.getSession();if(!e?.session?.user)throw new Error("Not authenticated");const a=e.session.user.id,t=`user_${a}/${o}`,{data:s,error:r}=await n.storage.from("user_files_bucket").list(`user_${a}`,{limit:1,offset:0,search:o});if(r)throw r;if(!s||s.length===0)throw new Error("File not found in storage");const{error:i}=await n.storage.from("user_files_bucket").remove([t]);if(i)throw i;const{error:c}=await n.from("user_files").delete().match({file_name:o,user_id:a});if(c)throw c;return{success:!0,message:"File deleted successfully"}}catch(e){return console.error("Error deleting file:",e),{success:!1,message:e.message||"Error deleting file. If this persists please contact us."}}},async updateField(o,e,a){try{const{data:t}=await n.auth.getSession();if(!t?.session?.user)throw new Error("Not authenticated");const s=t.session.user.id,{data:r,error:i}=await n.from("profiles").select("master_map_id").eq("id",s).single();if(i)throw new Error(`Profile error: ${i.message}`);const c=r.master_map_id;if(!c)throw new Error("No master map associated with user");const l={name:e};a!==void 0&&(l.area=a);const{data:h,error:u}=await n.from("fields").update(l).eq("field_id",o).eq("map_id",c).select();if(u)throw new Error(`Update error: ${u.message}`);return{success:!0,message:"Field updated successfully",data:h}}catch(t){return console.error("Error updating field:",t),{success:!1,message:t.message||"An error occurred while updating the field"}}},async deleteField(o){try{const{data:e}=await n.auth.getSession();if(!e?.session?.user)throw new Error("Not authenticated");const a=e.session.user.id,{data:t,error:s}=await n.from("profiles").select("master_map_id").eq("id",a).single();if(s)throw new Error(`Profile error: ${s.message}`);const r=t.master_map_id;if(!r)throw new Error("No master map associated with user");const{error:i}=await n.from("fields").delete().eq("field_id",o).eq("map_id",r);if(i)throw new Error(`Delete error: ${i.message}`);return{success:!0,message:"Field deleted successfully"}}catch(e){return console.error("Error deleting field:",e),{success:!1,message:e.message||"An error occurred while deleting the field"}}},async uploadFile(o){try{const{data:e}=await n.auth.getSession();if(!e?.session?.user)throw new Error("Not authenticated");const a=e.session.user.id;if(!o)throw new Error("No file selected");const{data:t,error:s}=await n.storage.from("user_files_bucket").upload(`user_${a}/${o.name}`,o);if(s)throw s;try{console.log("Attempting to upload to backup bucket...");const{data:c,error:l}=await n.storage.from("user_files_bucket_copy").upload(`user_${a}/${o.name}`,o);l?(console.error("Backup upload error:",l),console.log("Main upload succeeded, but backup failed. Check bucket permissions.")):console.log("Backup upload succeeded:",c)}catch(c){console.error("Exception during backup upload:",c),console.log("Continuing with main workflow despite backup failure")}const{data:r,error:i}=await n.from("user_files").insert({file_name:o.name,file_path:t.path,user_id:a}).select("*").single();if(i)throw i;return{success:!0,message:"File uploaded successfully",file:r}}catch(e){return console.error("Error uploading file:",e),{success:!1,message:e.message||"Failed to upload file"}}},async getUserFiles(){try{const{data:o}=await n.auth.getSession();if(!o?.session?.user)throw new Error("Not authenticated");const e=o.session.user.id,{data:a,error:t}=await n.from("user_files").select("file_id, user_id, file_name, file_path, created_at").eq("user_id",e).order("created_at",{ascending:!1});if(t)throw t;return a.map(r=>({id:r.file_id,name:r.file_name,path:r.file_path,uploadedDate:r.created_at,status:"Processed",message:"File uploaded successfully"}))}catch(o){throw console.error("Error fetching user files:",o),new Error("Failed to fetch user files")}},async loadFields(){try{const{data:o}=await n.auth.getSession();if(!o?.session?.user)throw new Error("Not authenticated");const e=o.session.user.id,{data:a,error:t}=await n.from("profiles").select("master_map_id").eq("id",e).single();if(t)throw t;const s=a.master_map_id;if(!s)throw new Error("No master map associated with user");const{data:r,error:i}=await n.from("fields").select("*").eq("map_id",s).order("name",{ascending:!0});if(i)throw i;return{fields:r}}catch(o){return console.error("Error loading fields:",o),{fields:[],error:o.message}}}};export{R as I,T as f};
