import{s as i}from"./BaPH9Oqq.js";import{P as u}from"./fQFbg8Ms.js";const p="free",m=[{id:"free",name:"🚜SKAN Member",description:"Join an existing map as an operator, or test out our features free",price:{monthly:{original:"Free",discounted:"Free"},yearly:{original:"Free",discounted:"Free"}},priceIntervalName:{monthly:"no credit card required",yearly:"no credit card required"},stripe_price_id:{monthly:null,yearly:null},features:["Join other maps with unlimited resources","1 Map Creation","100 active pin drops","100 000 Trail tokens","Real time location updates"],style:"bg-gray-100 border-gray-200"},{id:"pro",name:"⭐ SKAN Founder",description:"Invite other users to your map, completely adjustable # of seats",price:{monthly:{original:"$45",discounted:"$45"},yearly:{original:"$45",discounted:"$30.4"}},priceIntervalName:{monthly:"per month",yearly:"per year"},stripe_price_id:{monthly:"price_1PkkO8K3At0l0k1HqvxEEBw2",yearly:"price_1PdxlVK3At0l0k1HoEgkFynm"},stripe_product_id:"prod_QUxgzq6c3meKyZ",features:["Invite others to share your map","Customizable # of seats","Unlimited map creation","Unlimited pin drops","Unlimited Trail credits","All vehicles unlocked"],style:"bg-blue-100 border-blue-300"}],g={async getSubscriptionData(){var n;try{const{data:e}=await i.auth.getSession();if(!((n=e==null?void 0:e.session)!=null&&n.user))throw new Error("Not authenticated");const r=e.session.user.id,{data:t,error:s}=await i.from("stripe_customers").select("stripe_customer_id").eq("user_id",r);if(s)throw new Error(`Error retrieving customer data: ${s.message}`);if(!t||t.length===0)return console.log("No Customer found",t),{success:!0,isActiveCustomer:!1,hasEverHadSubscription:!1,currentPlanId:p,subscriptionData:null};console.log("Customer found",t);const o=t[0].stripe_customer_id,c=await this.callSubscriptionFunction(e.session.access_token,o);return console.log(c),c}catch(e){return console.error("Error in getSubscriptionData:",e),{success:!1,message:e.message,isActiveCustomer:!1,hasEverHadSubscription:!1,currentPlanId:p,subscriptionData:null}}},async callSubscriptionFunction(n,e){try{const r=`${u}/functions/v1/subscription`,t=await fetch(r,{method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"},body:JSON.stringify({customerId:e})});if(!t.ok){const o=await t.text();throw new Error(`Subscription function error: ${o}`)}const s=await t.json();return{success:!0,isActiveCustomer:!!s.primarySubscription,hasEverHadSubscription:s.hasEverHadSubscription,currentPlanId:s.currentPlanId,subscriptionData:s.primarySubscription}}catch(r){return console.error("Error in callSubscriptionFunction:",r),{success:!1,message:r.message,isActiveCustomer:!1,hasEverHadSubscription:!1,currentPlanId:p,subscriptionData:null}}},async createCheckoutSession({priceId:n,seats:e=1,discount:r=!1,discountcode:t=null}){var s;try{const{data:o}=await i.auth.getSession();if(!((s=o==null?void 0:o.session)!=null&&s.user))throw new Error("Not authenticated");const c=o.session.user.id,l=`${u}/functions/v1/create-checkout`,a=await fetch(l,{method:"POST",headers:{Authorization:`Bearer ${o.session.access_token}`,"Content-Type":"application/json"},body:JSON.stringify({priceId:n,seats:e,discount:r,discountcode:t})});if(!a.ok){const d=await a.json().catch(()=>({}));throw new Error(d.error||`Failed to create checkout (${a.status})`)}return{success:!0,stripeUrl:(await a.json()).stripeUrl}}catch(o){return console.error("Error creating checkout session:",o),{success:!1,message:o.message,stripeUrl:null}}},async createPortalSession(n="/account/billing"){var e;try{const{data:r}=await i.auth.getSession();if(!((e=r==null?void 0:r.session)!=null&&e.user))throw new Error("Not authenticated");const t=r.session.user.id,{data:s,error:o}=await i.from("stripe_customers").select("stripe_customer_id").eq("user_id",t);if(o)throw new Error(`Error retrieving customer data: ${o.message}`);if(!s||s.length===0)throw new Error("No subscription found to manage");const c=s[0].stripe_customer_id,l=`${u}/functions/v1/create-portal`,a=await fetch(l,{method:"POST",headers:{Authorization:`Bearer ${r.session.access_token}`,"Content-Type":"application/json"},body:JSON.stringify({customerId:c,returnUrl:window.location.origin+n})});if(!a.ok){const d=await a.text();throw new Error(`Failed to create portal session: ${d}`)}return{success:!0,url:(await a.json()).url}}catch(r){return console.error("Error creating portal session:",r),{success:!1,message:r.message,url:null}}},async createFreeSubscription(){var n;try{const{data:e}=await i.auth.getSession();if(!((n=e==null?void 0:e.session)!=null&&n.user))throw new Error("Not authenticated");const r=`${u}/functions/v1/create-free-subscription`,t=await fetch(r,{method:"POST",headers:{Authorization:`Bearer ${e.session.access_token}`,"Content-Type":"application/json"}});if(!t.ok){const s=await t.json().catch(()=>({}));throw new Error(s.error||`Failed to create free subscription (${t.status})`)}return{success:!0}}catch(e){return console.error("Error creating free subscription:",e),{success:!1,message:e.message}}},getAvailablePlans(){return{success:!0,plans:m}},getPlanDetails(n){const e=m.find(r=>r.id===n);return{success:!!e,plan:e||null,message:e?null:`Plan ${n} not found`}}};export{g as s};
