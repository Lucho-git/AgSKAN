import{s as o}from"./supabaseClient.998d708c.js";const C={async connectToMap(t){var r;try{const{data:s}=await o.auth.getSession();if(!((r=s==null?void 0:s.session)!=null&&r.user))throw new Error("Not authenticated");const{data:e,error:i}=await o.from("master_maps").select("id, map_name, master_user_id").eq("id",t).single();if(i||!e)throw new Error("Map not found");const{data:n,error:l}=await o.from("operations").select("*").eq("master_map_id",t).order("year",{ascending:!1});l&&console.error("Error fetching operations:",l);const{data:c,error:u}=await o.from("profiles").select("recent_maps, full_name, id").eq("id",s.session.user.id).single();if(u)throw console.error("Error fetching user data:",u),new Error("Failed to fetch user data");let a=c.recent_maps||[];a=a.filter(_=>_!==t),a.unshift(t),a=a.slice(0,10);const{data:m,error:h}=await o.from("profiles").select("full_name").eq("id",e.master_user_id).single();h&&console.error("Error fetching owner data:",h);const{data:d,error:f}=await o.from("user_subscriptions").select("*").eq("user_id",e.master_user_id).single();f&&f.code!=="PGRST116"&&console.error("Error fetching subscription:",f);const w=n&&n.length>0?n[0]:null,{error:E}=await o.from("profiles").update({master_map_id:t,recent_maps:a,selected_operation_id:(w==null?void 0:w.id)||null}).eq("id",s.session.user.id);if(E)throw console.error("Error updating profile:",E),new Error("Failed to connect to map");const{data:p,error:g}=await o.from("profiles").select("id, full_name").eq("master_map_id",t);g&&console.error("Error fetching connected profiles:",g);const{count:S,error:y}=await o.from("map_markers").select("id",{count:"exact",head:!0}).eq("master_map_id",t);y&&console.error("Error fetching marker count:",y);const{count:F,error:q}=await o.from("trail_data").select("id",{count:"exact",head:!0}).eq("master_map_id",t);q&&console.error("Error fetching trail count:",q);const{data:M,error:v}=await o.from("vehicle_state").select("*").eq("master_map_id",t).in("vehicle_id",(p==null?void 0:p.map(_=>_.id))||[]);v&&console.error("Error fetching vehicle states:",v);const b=(p||[]).some(_=>_.id===c.id);let k=[...p||[]];return b||(console.log("Adding current user to connected profiles"),k.push({id:c.id,full_name:c.full_name})),{success:!0,message:"Successfully connected to map",data:{mapId:t,mapName:e.map_name,connectedMap:{id:t,map_name:e.map_name,master_user_id:e.master_user_id,owner:(m==null?void 0:m.full_name)||"Unknown",is_owner:e.master_user_id===s.session.user.id,masterSubscription:d||null,is_connected:!0},mapActivity:{marker_count:S||0,trail_count:F||0,connected_profiles:k,vehicle_states:M||[]},operations:n||[],operation:w}}}catch(s){return console.error("Error connecting to map:",s),{success:!1,message:s.message}}},async disconnectFromMap(){var t;try{const{data:r}=await o.auth.getSession();if(!((t=r==null?void 0:r.session)!=null&&t.user))throw new Error("Not authenticated");const{error:s}=await o.from("profiles").update({master_map_id:null}).eq("id",r.session.user.id);if(s)throw new Error("Failed to disconnect from map");return{success:!0,message:"Successfully disconnected from map"}}catch(r){return console.error("Error disconnecting from map:",r),{success:!1,message:r.message}}},async createAndJoinMap(t,r){var s;try{const{data:e}=await o.auth.getSession();if(!((s=e==null?void 0:e.session)!=null&&s.user))throw new Error("Not authenticated");const{data:i,error:n}=await o.from("profiles").select("id, full_name, recent_maps").eq("id",e.session.user.id).single();if(n)throw console.error("Error fetching user data:",n),new Error("Failed to fetch user data");const{error:l}=await o.from("master_maps").insert({id:r,master_user_id:e.session.user.id,map_name:t});if(l)throw console.error("Error creating map:",l),new Error("Failed to create map");const{data:c,error:u}=await o.from("operations").insert({master_map_id:r,name:"Farm Management",year:2024,description:`Completing work around '${t}'s farm`}).select().single();if(u)throw console.error("Error creating operation:",u),new Error("Failed to create default operation");let a=i.recent_maps||[];a=a.filter(f=>f!==r),a.unshift(r),a=a.slice(0,10);const{error:m}=await o.from("profiles").update({master_map_id:r,recent_maps:a,selected_operation_id:c.id}).eq("id",e.session.user.id);if(m)throw console.error("Error updating profile:",m),new Error("Failed to connect to map");const{data:h,error:d}=await o.from("user_subscriptions").select("*").eq("user_id",e.session.user.id).single();return d&&d.code!=="PGRST116"&&console.error("Error fetching subscription:",d),{success:!0,message:"Successfully created and joined map",data:{mapId:r,mapName:t,operationId:c.id,connectedMap:{id:r,map_name:t,master_user_id:e.session.user.id,owner:i.full_name,is_owner:!0,masterSubscription:h||null,is_connected:!0},mapActivity:{marker_count:0,trail_count:0,connected_profiles:[{id:e.session.user.id,full_name:i.full_name,master_map_id:r}],vehicle_states:[]},operation:{id:c.id,name:c.name,year:c.year,description:c.description,master_map_id:r}}}}catch(e){return console.error("Error creating map:",e),{success:!1,message:e.message}}},async renameMap(t,r){var s;try{const{data:e}=await o.auth.getSession();if(!((s=e==null?void 0:e.session)!=null&&s.user))throw new Error("Not authenticated");const{data:i,error:n}=await o.from("master_maps").select("master_user_id").eq("id",t).single();if(n||!i)throw new Error("Map not found");if(i.master_user_id!==e.session.user.id)throw new Error("You do not have permission to rename this map");const{error:l}=await o.from("master_maps").update({map_name:r}).eq("id",t);if(l)throw new Error("Failed to rename map");return{success:!0,message:"Successfully renamed map"}}catch(e){return console.error("Error renaming map:",e),{success:!1,message:e.message}}},async deleteMap(t){var r;try{const{data:s}=await o.auth.getSession();if(!((r=s==null?void 0:s.session)!=null&&r.user))throw new Error("Not authenticated");const{data:e,error:i}=await o.from("master_maps").select("master_user_id").eq("id",t).single();if(i||!e)throw new Error("Map not found");if(e.master_user_id!==s.session.user.id)throw new Error("You do not have permission to delete this map");const{error:n}=await o.from("profiles").update({master_map_id:null}).eq("master_map_id",t);if(n)throw new Error("Failed to disconnect users from the map");const{error:l}=await o.from("master_maps").delete().eq("id",t);if(l)throw new Error("Failed to delete map");return{success:!0,message:"Successfully deleted map"}}catch(s){return console.error("Error deleting map:",s),{success:!1,message:s.message}}},async getMapActivity(t){try{const{data:r,error:s}=await o.from("profiles").select("id, full_name").eq("master_map_id",t);if(s)throw new Error("Failed to fetch connected profiles");const{count:e,error:i}=await o.from("map_markers").select("id",{count:"exact",head:!0}).eq("master_map_id",t);i&&console.error("Error fetching marker count:",i);const{count:n,error:l}=await o.from("trail_data").select("id",{count:"exact",head:!0}).eq("master_map_id",t);l&&console.error("Error fetching trail count:",l);const{data:c,error:u}=await o.from("vehicle_state").select("*").eq("master_map_id",t).in("vehicle_id",(r==null?void 0:r.map(a=>a.id))||[]);return u&&console.error("Error fetching vehicle states:",u),{success:!0,data:{marker_count:e||0,trail_count:n||0,connected_profiles:r||[],vehicle_states:c||[]}}}catch(r){return console.error("Error fetching map activity:",r),{success:!1,message:r.message}}},async kickUser(t){var r;try{const{data:s}=await o.auth.getSession();if(!((r=s==null?void 0:s.session)!=null&&r.user))throw new Error("Not authenticated");const{error:e}=await o.from("profiles").update({master_map_id:null}).eq("id",t);if(e)throw new Error("Failed to kick user");return{success:!0,message:"Successfully kicked user from map"}}catch(s){return console.error("Error kicking user:",s),{success:!1,message:s.message}}},async locateVehicle(t){try{return{success:!0,message:"Locating vehicle on the map"}}catch(r){return console.error("Error locating vehicle:",r),{success:!1,message:r.message}}}};export{C as m};
