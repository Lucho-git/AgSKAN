import{s as n}from"./BaPH9Oqq.js";import{P as u}from"./fQFbg8Ms.js";const c="free",l=[{id:"free",name:"🚜SKAN Member",description:"Join an existing map as an operator, or test out our features free",price:{monthly:{original:"Free",discounted:"Free"},yearly:{original:"Free",discounted:"Free"}},priceIntervalName:{monthly:"no credit card required",yearly:"no credit card required"},stripe_price_id:{monthly:null,yearly:null},features:["Join other maps with unlimited resources","1 Map Creation","100 active pin drops","100 000 Trail tokens","Real time location updates"],style:"bg-gray-100 border-gray-200"},{id:"pro",name:"⭐ SKAN Founder",description:"Invite other users to your map, completely adjustable # of seats",price:{monthly:{original:"$45",discounted:"$45"},yearly:{original:"$45",discounted:"$30.4"}},priceIntervalName:{monthly:"per month",yearly:"per year"},stripe_price_id:{monthly:"price_1PkkO8K3At0l0k1HqvxEEBw2",yearly:"price_1PdxlVK3At0l0k1HoEgkFynm"},stripe_product_id:"prod_QUxgzq6c3meKyZ",features:["Invite others to share your map","Customizable # of seats","Unlimited map creation","Unlimited pin drops","Unlimited Trail credits","All vehicles unlocked"],style:"bg-blue-100 border-blue-300"}],g={async getSubscriptionData(){var s;try{const{data:e}=await n.auth.getSession();if(!((s=e==null?void 0:e.session)!=null&&s.user))throw new Error("Not authenticated");const r=e.session.user.id,{data:o,error:t}=await n.from("stripe_customers").select("stripe_customer_id").eq("user_id",r);if(t)throw new Error(`Error retrieving customer data: ${t.message}`);if(!o||o.length===0)return{success:!0,isActiveCustomer:!1,hasEverHadSubscription:!1,currentPlanId:c,subscriptionData:null};const i=o[0].stripe_customer_id;return await this.callSubscriptionFunction(e.session.access_token,i)}catch(e){return console.error("Error in getSubscriptionData:",e),{success:!1,message:e.message,isActiveCustomer:!1,hasEverHadSubscription:!1,currentPlanId:c,subscriptionData:null}}},async callSubscriptionFunction(s,e){try{const r=`${u}/functions/v1/subscription`,o=await fetch(r,{method:"POST",headers:{Authorization:`Bearer ${s}`,"Content-Type":"application/json"},body:JSON.stringify({customerId:e})});if(!o.ok){const i=await o.text();throw new Error(`Subscription function error: ${i}`)}const t=await o.json();return{success:!0,isActiveCustomer:!!t.primarySubscription,hasEverHadSubscription:t.hasEverHadSubscription,currentPlanId:t.currentPlanId,subscriptionData:t.primarySubscription}}catch(r){return console.error("Error in callSubscriptionFunction:",r),{success:!1,message:r.message,isActiveCustomer:!1,hasEverHadSubscription:!1,currentPlanId:c,subscriptionData:null}}},async createPortalSession(s="/account/billing"){var e;try{const{data:r}=await n.auth.getSession();if(!((e=r==null?void 0:r.session)!=null&&e.user))throw new Error("Not authenticated");const o=r.session.user.id,{data:t,error:i}=await n.from("stripe_customers").select("stripe_customer_id").eq("user_id",o);if(i)throw new Error(`Error retrieving customer data: ${i.message}`);if(!t||t.length===0)throw new Error("No subscription found to manage");const d=t[0].stripe_customer_id,p=`${u}/functions/v1/create-portal`,a=await fetch(p,{method:"POST",headers:{Authorization:`Bearer ${r.session.access_token}`,"Content-Type":"application/json"},body:JSON.stringify({customerId:d,returnUrl:window.location.origin+s})});if(!a.ok){const m=await a.text();throw new Error(`Failed to create portal session: ${m}`)}return{success:!0,url:(await a.json()).url}}catch(r){return console.error("Error creating portal session:",r),{success:!1,message:r.message,url:null}}},getAvailablePlans(){return{success:!0,plans:l}},getPlanDetails(s){const e=l.find(r=>r.id===s);return{success:!!e,plan:e||null,message:e?null:`Plan ${s} not found`}}};export{g as s};
