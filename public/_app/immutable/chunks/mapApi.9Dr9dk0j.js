import{s}from"./supabaseClient.CEfSaNHh.js";const A={async connectToMap(r){try{const{data:e}=await s.auth.getSession();if(!e?.session?.user)throw new Error("Not authenticated");const{data:t,error:n}=await s.from("master_maps").select("id, map_name, master_user_id").eq("id",r).single();if(n||!t)throw new Error("Map not found");const{data:a,error:c}=await s.from("operations").select("*").eq("master_map_id",r).order("year",{ascending:!1});c&&console.error("Error fetching operations:",c);const{data:i,error:l}=await s.from("profiles").select("recent_maps, full_name, id").eq("id",e.session.user.id).single();if(l)throw console.error("Error fetching user data:",l),new Error("Failed to fetch user data");let o=i.recent_maps||[];o=o.filter(f=>f!==r),o.unshift(r),o=o.slice(0,10);const{data:u,error:p}=await s.from("profiles").select("full_name").eq("id",t.master_user_id).single();p&&console.error("Error fetching owner data:",p);const{data:m,error:d}=await s.from("user_subscriptions").select("*").eq("user_id",t.master_user_id).single();d&&d.code!=="PGRST116"&&console.error("Error fetching subscription:",d);const h=a&&a.length>0?a[0]:null,{error:w}=await s.from("profiles").update({master_map_id:r,recent_maps:o,selected_operation_id:h?.id||null}).eq("id",e.session.user.id);if(w)throw console.error("Error updating profile:",w),new Error("Failed to connect to map");const{data:_,error:E}=await s.from("profiles").select("id, full_name").eq("master_map_id",r);E&&console.error("Error fetching connected profiles:",E);const{count:k,error:g}=await s.from("map_markers").select("id",{count:"exact",head:!0}).eq("master_map_id",r);g&&console.error("Error fetching marker count:",g);const{count:S,error:y}=await s.from("trail_data").select("id",{count:"exact",head:!0}).eq("master_map_id",r);y&&console.error("Error fetching trail count:",y);const{data:F,error:q}=await s.from("vehicle_state").select("*").eq("master_map_id",r).in("vehicle_id",_?.map(f=>f.id)||[]);q&&console.error("Error fetching vehicle states:",q);const M=(_||[]).some(f=>f.id===i.id);let v=[..._||[]];return M||(console.log("Adding current user to connected profiles"),v.push({id:i.id,full_name:i.full_name})),{success:!0,message:"Successfully connected to map",data:{mapId:r,mapName:t.map_name,connectedMap:{id:r,map_name:t.map_name,master_user_id:t.master_user_id,owner:u?.full_name||"Unknown",is_owner:t.master_user_id===e.session.user.id,masterSubscription:m||null,is_connected:!0},mapActivity:{marker_count:k||0,trail_count:S||0,connected_profiles:v,vehicle_states:F||[]},operations:a||[],operation:h}}}catch(e){return console.error("Error connecting to map:",e),{success:!1,message:e.message}}},async disconnectFromMap(){try{const{data:r}=await s.auth.getSession();if(!r?.session?.user)throw new Error("Not authenticated");const{error:e}=await s.from("profiles").update({master_map_id:null}).eq("id",r.session.user.id);if(e)throw new Error("Failed to disconnect from map");return{success:!0,message:"Successfully disconnected from map"}}catch(r){return console.error("Error disconnecting from map:",r),{success:!1,message:r.message}}},async createAndJoinMap(r,e){try{const{data:t}=await s.auth.getSession();if(!t?.session?.user)throw new Error("Not authenticated");const{data:n,error:a}=await s.from("profiles").select("id, full_name, recent_maps").eq("id",t.session.user.id).single();if(a)throw console.error("Error fetching user data:",a),new Error("Failed to fetch user data");const{error:c}=await s.from("master_maps").insert({id:e,master_user_id:t.session.user.id,map_name:r});if(c)throw console.error("Error creating map:",c),new Error("Failed to create map");const{data:i,error:l}=await s.from("operations").insert({master_map_id:e,name:"Farm Management",year:2024,description:`Completing work around '${r}'s farm`}).select().single();if(l)throw console.error("Error creating operation:",l),new Error("Failed to create default operation");let o=n.recent_maps||[];o=o.filter(d=>d!==e),o.unshift(e),o=o.slice(0,10);const{error:u}=await s.from("profiles").update({master_map_id:e,recent_maps:o,selected_operation_id:i.id}).eq("id",t.session.user.id);if(u)throw console.error("Error updating profile:",u),new Error("Failed to connect to map");const{data:p,error:m}=await s.from("user_subscriptions").select("*").eq("user_id",t.session.user.id).single();return m&&m.code!=="PGRST116"&&console.error("Error fetching subscription:",m),{success:!0,message:"Successfully created and joined map",data:{mapId:e,mapName:r,operationId:i.id,connectedMap:{id:e,map_name:r,master_user_id:t.session.user.id,owner:n.full_name,is_owner:!0,masterSubscription:p||null,is_connected:!0},mapActivity:{marker_count:0,trail_count:0,connected_profiles:[{id:t.session.user.id,full_name:n.full_name,master_map_id:e}],vehicle_states:[]},operation:{id:i.id,name:i.name,year:i.year,description:i.description,master_map_id:e}}}}catch(t){return console.error("Error creating map:",t),{success:!1,message:t.message}}},async renameMap(r,e){try{const{data:t}=await s.auth.getSession();if(!t?.session?.user)throw new Error("Not authenticated");const{data:n,error:a}=await s.from("master_maps").select("master_user_id").eq("id",r).single();if(a||!n)throw new Error("Map not found");if(n.master_user_id!==t.session.user.id)throw new Error("You do not have permission to rename this map");const{error:c}=await s.from("master_maps").update({map_name:e}).eq("id",r);if(c)throw new Error("Failed to rename map");return{success:!0,message:"Successfully renamed map"}}catch(t){return console.error("Error renaming map:",t),{success:!1,message:t.message}}},async deleteMap(r){try{const{data:e}=await s.auth.getSession();if(!e?.session?.user)throw new Error("Not authenticated");const{data:t,error:n}=await s.from("master_maps").select("master_user_id").eq("id",r).single();if(n||!t)throw new Error("Map not found");if(t.master_user_id!==e.session.user.id)throw new Error("You do not have permission to delete this map");const{error:a}=await s.from("profiles").update({master_map_id:null}).eq("master_map_id",r);if(a)throw new Error("Failed to disconnect users from the map");const{error:c}=await s.from("master_maps").delete().eq("id",r);if(c)throw new Error("Failed to delete map");return{success:!0,message:"Successfully deleted map"}}catch(e){return console.error("Error deleting map:",e),{success:!1,message:e.message}}},async getMapActivity(r){try{const{data:e,error:t}=await s.from("profiles").select("id, full_name").eq("master_map_id",r);if(t)throw new Error("Failed to fetch connected profiles");const{count:n,error:a}=await s.from("map_markers").select("id",{count:"exact",head:!0}).eq("master_map_id",r);a&&console.error("Error fetching marker count:",a);const{count:c,error:i}=await s.from("trail_data").select("id",{count:"exact",head:!0}).eq("master_map_id",r);i&&console.error("Error fetching trail count:",i);const{data:l,error:o}=await s.from("vehicle_state").select("*").eq("master_map_id",r).in("vehicle_id",e?.map(u=>u.id)||[]);return o&&console.error("Error fetching vehicle states:",o),{success:!0,data:{marker_count:n||0,trail_count:c||0,connected_profiles:e||[],vehicle_states:l||[]}}}catch(e){return console.error("Error fetching map activity:",e),{success:!1,message:e.message}}},async kickUser(r){try{const{data:e}=await s.auth.getSession();if(!e?.session?.user)throw new Error("Not authenticated");const{error:t}=await s.from("profiles").update({master_map_id:null}).eq("id",r);if(t)throw new Error("Failed to kick user");return{success:!0,message:"Successfully kicked user from map"}}catch(e){return console.error("Error kicking user:",e),{success:!1,message:e.message}}},async locateVehicle(r){try{return{success:!0,message:"Locating vehicle on the map"}}catch(e){return console.error("Error locating vehicle:",e),{success:!1,message:e.message}}}};export{A as m};
